# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥—Ä–µ—Å–æ–≤
param(
    [string]$AddressesFile = "addresses.txt",
    [string]$OutputFile = "results.txt",
    [int]$MaxRetries = 5, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
    [int]$RetryDelay = 2, # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    [int]$Timeout = 10, # –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    [int]$MaxThreads = 10, # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    [string]$DohUrl = "", # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è DoH URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, "https://cloudflare-dns.com/dns-query")
    [string]$DnsServers = "" # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è DNS-—Å–µ—Ä–≤–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "8.8.8.8,1.1.1.1")
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è HTTP –∫–æ–¥–∞
function Get-HttpCodeDescription {
    param([int]$Code)
    switch ($Code) {
        0 { return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞" }
        200 { return "OK - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" }
        201 { return "Created - –†–µ—Å—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" }
        204 { return "No Content - –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" }
        301 { return "Moved Permanently - –†–µ—Å—É—Ä—Å –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞" }
        302 { return "Found - –†–µ—Å—É—Ä—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω" }
        304 { return "Not Modified - –†–µ—Å—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è" }
        400 { return "Bad Request - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å" }
        401 { return "Unauthorized - –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" }
        403 { return "Forbidden - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" }
        404 { return "Not Found - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
        405 { return "Method Not Allowed - –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω" }
        408 { return "Request Timeout - –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ" }
        429 { return "Too Many Requests - –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤" }
        500 { return "Internal Server Error - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }
        502 { return "Bad Gateway - –û—à–∏–±–∫–∞ —à–ª—é–∑–∞" }
        503 { return "Service Unavailable - –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" }
        504 { return "Gateway Timeout - –®–ª—é–∑ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" }
        default {
            if ($Code -ge 200 -and $Code -lt 300) { return "–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å" }
            elseif ($Code -ge 300 -and $Code -lt 400) { return "–†–µ–¥–∏—Ä–µ–∫—Ç" }
            elseif ($Code -ge 400 -and $Code -lt 500) { return "–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞" }
            elseif ($Code -ge 500 -and $Code -lt 600) { return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }
            else { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥" }
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏ curl
function Get-CurlErrorDescription {
    param([int]$ExitCode)
    switch ($ExitCode) {
        1 { return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" }
        2 { return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" }
        3 { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª" }
        6 { return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞ –∏–ª–∏ DNS-–æ—à–∏–±–∫–∞" }
        7 { return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É" }
        28 { return "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ" }
        35 { return "–û—à–∏–±–∫–∞ SSL/TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" }
        52 { return "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö" }
        55 { return "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö" }
        56 { return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö" }
        60 { return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" }
        67 { return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" } # –î–æ–±–∞–≤–ª–µ–Ω–æ
        77 { return "–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" } # –î–æ–±–∞–≤–ª–µ–Ω–æ
        default { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ curl (–∫–æ–¥: $ExitCode)" }
    }
}

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
$currentTimeZone = (Get-TimeZone).DisplayName
# –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã:–°–µ–∫—É–Ω–¥—ã (–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å)
$customDateTimeFormat = "dd.MM.yyyy HH:mm:ss"
$timestamp = (Get-Date).ToString($customDateTimeFormat) + " ($currentTimeZone)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
if (-not (Test-Path $AddressesFile)) {
    Write-Host "–§–∞–π–ª $AddressesFile –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    Write-Host "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å URL-–∞–¥—Ä–µ—Å–∞–º–∏ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å." -ForegroundColor Yellow
    exit 1
}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
$OutputDir = Split-Path $OutputFile -Parent
if ($OutputDir -and -not (Test-Path $OutputDir)) {
    New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ DNS –¥–ª—è –æ—Ç—á–µ—Ç–∞
$dnsInfoLine = "DNS: –°–∏—Å—Ç–µ–º–Ω—ã–π"
if (-not [string]::IsNullOrWhiteSpace($DohUrl)) {
    if ($DohUrl -match "^https://.+") {
        $dnsInfoLine = "DNS: DoH - $DohUrl"
    } else {
        Write-Host "‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç DoH URL. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π DNS. –ü—Ä–∏–º–µ—Ä: https://cloudflare-dns.com/dns-query" -ForegroundColor Yellow
        $DohUrl = "" # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    }
} elseif (-not [string]::IsNullOrWhiteSpace($DnsServers)) {
    # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ –∑–∞–ø—è—Ç—ã–º–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    $dnsServerList = $DnsServers -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ }
    if ($dnsServerList.Count -gt 0) {
        $dnsInfoLine = "DNS: $($dnsServerList -join ', ')"
    }
}

# –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤ - $timestamp" | Out-File $OutputFile
$dnsInfoLine | Out-File $OutputFile -Append
"=" * 100 | Out-File $OutputFile -Append
"" | Out-File $OutputFile -Append

# –ß–∏—Ç–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
$rawAddresses = Get-Content $AddressesFile
$addresses = $rawAddresses | Where-Object { $_.Trim() -ne "" -and -not $_.StartsWith("#") }
if ($addresses.Count -eq 0) {
    Write-Host "‚ö†Ô∏è  –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö URL-–∞–¥—Ä–µ—Å–æ–≤!" -ForegroundColor Yellow
    "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö URL-–∞–¥—Ä–µ—Å–æ–≤" | Out-File $OutputFile -Append
    exit 1
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ DNS/DoH –¥–ª—è curl
$dnsArgs = @()
if (-not [string]::IsNullOrWhiteSpace($DohUrl)) {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTTPS URL
    if ($DohUrl -match "^https://.+") {
        $dnsArgs = @('--doh-url', $DohUrl)
        Write-Host "‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DoH-—Å–µ—Ä–≤–µ—Ä: $DohUrl" -ForegroundColor Cyan
    }
} elseif (-not [string]::IsNullOrWhiteSpace($DnsServers)) {
    # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ –∑–∞–ø—è—Ç—ã–º–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    $dnsServerList = $DnsServers -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ }
    if ($dnsServerList.Count -gt 0) {
        # curl –æ–∂–∏–¥–∞–µ—Ç --dns-servers ip1,ip2,...
        $dnsArgs = @('--dns-servers', ($dnsServerList -join ','))
        Write-Host "‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è DNS-—Å–µ—Ä–≤–µ—Ä—ã: $($dnsServerList -join ', ')" -ForegroundColor Cyan
    }
} else {
    Write-Host "‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ DNS-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏." -ForegroundColor Cyan
}

Write-Host "üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É $($addresses.Count) –∞–¥—Ä–µ—Å–æ–≤ (–º–∞–∫—Å–∏–º—É–º $MaxRetries –ø–æ–ø—ã—Ç–æ–∫, $MaxThreads –ø–æ—Ç–æ–∫–æ–≤)..." -ForegroundColor Cyan
Write-Host "=" * 100

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
$summary = [PSCustomObject]@{
    total = $addresses.Count
    available = 0
    redirect = 0
    unavailable = 0
    errors = 0
    retries = 0
    totalTime = 0
}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
$results = [System.Collections.ArrayList]::new()
$lock = New-Object System.Object

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ URL
function Test-Url {
    param(
        [string]$url,
        [int]$MaxRetries,
        [int]$RetryDelay,
        [int]$Timeout,
        [array]$DnsArgs # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    )
    $originalUrl = $url.Trim()
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if ([string]::IsNullOrEmpty($originalUrl) -or $originalUrl.StartsWith("#")) {
        return $null
    }
    # –ï—Å–ª–∏ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º https://
    if (-not ($originalUrl -match "^[a-zA-Z]+://")) {
        $testUrl = "https://$originalUrl"
    } else {
        $testUrl = $originalUrl
    }

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä—è—é: " -NoNewline -ForegroundColor Gray
    Write-Host $testUrl -ForegroundColor Blue -NoNewline
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try {
        $uri = [System.Uri]$testUrl
        $domain = $uri.Host
        Write-Host " [$domain]" -ForegroundColor DarkGray
    } catch {
        Write-Host ""
    }

    $success = $false
    $retryCount = 0
    $attemptResults = @()
    $finalResult = $null

    # –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    for ($attempt = 1; $attempt -le $MaxRetries -and -not $success; $attempt++) {
        if ($attempt -gt 1) {
            Write-Host "  ‚Üª –ü–æ–ø—ã—Ç–∫–∞ $attempt/$MaxRetries..." -ForegroundColor Yellow
            Start-Sleep -Seconds $RetryDelay
        }
        $startTime = Get-Date
        try {
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º -L –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            $curlArgs = @(
                '-I',                    # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                '-L',                    # –°–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
                '-s',                    # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
                '--connect-timeout', $Timeout.ToString(),
                '--max-time', '30'
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã DNS/DoH, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if ($DnsArgs.Count -gt 0) { $DnsArgs }
                '-w', "HTTP_CODE:%{http_code}|TOTAL_TIME:%{time_total}|SIZE_DOWNLOAD:%{size_download}|REDIRECT_URL:%{redirect_url}",
                $testUrl
            ) | Where-Object { $_ -ne $null } # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ $DnsArgs –ø—É—Å—Ç

            $curlOutput = & curl.exe @curlArgs 2>$null
            $endTime = Get-Date
            $attemptTime = ($endTime - $startTime).TotalSeconds

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º exit code –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            $curlExitCode = $LASTEXITCODE

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ curl
            $outputLines = $curlOutput | Where-Object { $_ -ne $null }
            $outputString = $outputLines -join "`n"

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            $httpCode = ""
            $totalTime = ""
            $sizeDownload = ""
            $redirectUrl = "" # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –æ—Ç curl
            $lastLine = $outputLines[-1]
            if ($lastLine -match "HTTP_CODE:(\d+)\|TOTAL_TIME:([\d\.]+)\|SIZE_DOWNLOAD:(\d+)\|REDIRECT_URL:(.*)") {
                $httpCode = $matches[1]
                $totalTime = $matches[2]
                $sizeDownload = $matches[3]
                $redirectUrl = $matches[4].Trim() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            }
            elseif ($outputString -match "HTTP_CODE:(\d+)") {
                $httpCode = $matches[1]
            }

            # –ü–æ–∏—Å–∫ HTTP –∫–æ–¥–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            $headerLines = $outputLines | Where-Object { $_ -match "^HTTP/" }
            $lastHeaderCode = ""
            if ($headerLines) {
                $lastHeader = $headerLines[-1]
                if ($lastHeader -match "HTTP/\d+\.\d+\s+(\d+)") {
                    $lastHeaderCode = $matches[1]
                }
            }
            if ([string]::IsNullOrEmpty($httpCode) -and $lastHeaderCode) {
                $httpCode = $lastHeaderCode
            }

            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º exit code
            if ([string]::IsNullOrEmpty($httpCode)) {
                if ($curlExitCode -ne 0) {
                    $httpCode = "000"
                } else {
                    # –ï—Å–ª–∏ exit code 0, –Ω–æ –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞–≤–∏–º 0
                    $httpCode = "0"
                }
            }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º redirect_url –∏–∑ curl, —Ç–∞–∫ –∫–∞–∫ -L —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤—Å—é —Ü–µ–ø–æ—á–∫—É
            $isRedirect = $false
            $redirectLocation = ""
            if (-not [string]::IsNullOrWhiteSpace($redirectUrl)) {
                $isRedirect = $true
                $redirectLocation = $redirectUrl
            } else {
                # –ï—Å–ª–∏ curl –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª redirect_url, –ø—Ä–æ–≤–µ—Ä—è–µ–º Location –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–≤–µ—Ç–µ
                $locationHeaders = $outputLines | Where-Object { $_ -match "^[Ll]ocation:" }
                if ($locationHeaders) {
                    $isRedirect = $true
                    $redirectLocation = ($locationHeaders[-1] -replace "^[Ll]ocation:\s*", "").Trim()
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π URL, –µ—Å–ª–∏ Location –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
                    if ($redirectLocation -and -not ($redirectLocation -match "^[a-zA-Z]+://")) {
                        try {
                            $originalUri = [System.Uri]$testUrl
                            if ($redirectLocation.StartsWith("/")) {
                                # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                                $redirectLocation = "$($originalUri.Scheme)://$($originalUri.Host)$redirectLocation"
                            } else {
                                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                                $basePath = $originalUri.AbsolutePath
                                if (-not $basePath.EndsWith("/")) {
                                    $basePath = [System.IO.Path]::GetDirectoryName($basePath).Replace("\", "/")
                                    if (-not $basePath.EndsWith("/")) { $basePath += "/" }
                                }
                                $redirectLocation = "$($originalUri.Scheme)://$($originalUri.Host)$basePath$redirectLocation"
                            }
                        } catch {
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π URL, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        }
                    }
                }
            }

            [int]$code = if ([string]::IsNullOrEmpty($httpCode)) { 0 } else { [int]$httpCode }
            $attemptResult = @{
                attempt = $attempt
                code = $code
                isRedirect = $isRedirect
                redirectLocation = $redirectLocation
                totalTime = $totalTime
                sizeDownload = $sizeDownload
                executionTime = $attemptTime
                curlExitCode = $curlExitCode
            }
            $attemptResults += $attemptResult

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            if ($code -ge 200 -and $code -lt 400) {
                $success = $true
                $retryCount = $attempt - 1
                $finalResult = $attemptResult
                if ($isRedirect) {
                    Write-Host "  ‚ö†Ô∏è  [–†–ï–î–ò–†–ï–ö–¢] –ö–æ–¥: $httpCode" -ForegroundColor Yellow
                    Write-Host "     $(Get-HttpCodeDescription -Code $code)" -ForegroundColor DarkYellow
                    if ($redirectLocation) {
                        Write-Host "     –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: " -NoNewline -ForegroundColor Yellow
                        Write-Host $redirectLocation -ForegroundColor Blue
                    }
                    if ($totalTime) {
                        Write-Host "     –í—Ä–µ–º—è: $($totalTime)s" -ForegroundColor Gray
                    }
                }
                else {
                    Write-Host "  ‚úÖ [–î–û–°–¢–£–ü–ï–ù] –ö–æ–¥: $httpCode" -ForegroundColor Green
                    Write-Host "     $(Get-HttpCodeDescription -Code $code)" -ForegroundColor DarkGreen
                    if ($totalTime) {
                        Write-Host "     –í—Ä–µ–º—è: $($totalTime)s" -ForegroundColor Gray
                    }
                    if ($sizeDownload -and [int]$sizeDownload -gt 0) {
                        Write-Host "     –†–∞–∑–º–µ—Ä: $sizeDownload –±–∞–π—Ç" -ForegroundColor Gray
                    }
                }
            }
            elseif ($attempt -eq $MaxRetries) {
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                if ($code -eq 0 -or $code -eq "000") {
                    Write-Host "  ‚ö†Ô∏è  [–ù–ï–¢ –û–¢–í–ï–¢–ê] –ö–æ–¥: $httpCode" -ForegroundColor Magenta
                    if ($curlExitCode -ne 0) {
                        Write-Host "     –û—à–∏–±–∫–∞ curl: $curlExitCode - $(Get-CurlErrorDescription -ExitCode $curlExitCode)" -ForegroundColor DarkMagenta
                    } else {
                        Write-Host "     –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞" -ForegroundColor DarkMagenta
                    }
                } else {
                    Write-Host "  ‚ùå [–ù–ï–î–û–°–¢–£–ü–ï–ù] –ö–æ–¥: $httpCode" -ForegroundColor Red
                    Write-Host "     $(Get-HttpCodeDescription -Code $code)" -ForegroundColor DarkRed
                }
                if ($totalTime) {
                    Write-Host "     –í—Ä–µ–º—è: $($totalTime)s" -ForegroundColor Gray
                }
                $finalResult = $attemptResult
            }
        }
        catch {
            $attemptTime = (Get-Date - $startTime).TotalSeconds
            $attemptResult = @{
                attempt = $attempt
                code = 0
                error = $_.Exception.Message
                executionTime = $attemptTime
                curlExitCode = if (Get-Variable -Name LASTEXITCODE -ErrorAction SilentlyContinue) { $LASTEXITCODE } else { -1 }
            }
            $attemptResults += $attemptResult
            if ($attempt -eq $MaxRetries) {
                Write-Host "  ‚ö†Ô∏è  [–û–®–ò–ë–ö–ê] $($_.Exception.Message)" -ForegroundColor Magenta
                if ($LASTEXITCODE -ne 0) {
                    Write-Host "     –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: $(Get-CurlErrorDescription -ExitCode $LASTEXITCODE)" -ForegroundColor DarkMagenta
                }
                $finalResult = $attemptResult
            }
        }
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    $category = if ($success) {
        if ($finalResult.isRedirect) {
            if ($retryCount -gt 0) { "redirect_retry" } else { "redirect_first" }
        } else {
            if ($retryCount -gt 0) { "available_retry" } else { "available_first" }
        }
    } else {
        if ($finalResult.code -eq 0 -or $finalResult.code -eq "000" -or $finalResult.curlExitCode -ne 0) { "error" } else { "unavailable" }
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
    $domain = try { ([System.Uri]$testUrl).Host } catch { $originalUrl }
    Write-Host ""
    return [PSCustomObject]@{
        Url = $originalUrl
        TestUrl = $testUrl
        FinalResult = $finalResult
        AttemptResults = $attemptResults
        RetryCount = $retryCount
        Success = $success
        Category = $category
        Domain = $domain
        StatusCode = $finalResult.code
        ResponseTime = if ($finalResult.totalTime) { [double]$finalResult.totalTime } else { 0 }
    }
}

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL-–∞–¥—Ä–µ—Å–æ–≤
$runspacePool = [runspacefactory]::CreateRunspacePool(1, $MaxThreads)
$runspacePool.Open()
$jobs = @()
$addresses | ForEach-Object {
    $scriptBlock = {
        param($url, $MaxRetries, $RetryDelay, $Timeout, $DnsArgs)

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∫—Ä–∏–ø—Ç–±–ª–æ–∫
        function Get-HttpCodeDescription {
            param([int]$Code)
            switch ($Code) {
                0 { return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞" }
                200 { return "OK - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" }
                201 { return "Created - –†–µ—Å—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" }
                204 { return "No Content - –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" }
                301 { return "Moved Permanently - –†–µ—Å—É—Ä—Å –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞" }
                302 { return "Found - –†–µ—Å—É—Ä—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω" }
                304 { return "Not Modified - –†–µ—Å—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è" }
                400 { return "Bad Request - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å" }
                401 { return "Unauthorized - –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" }
                403 { return "Forbidden - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" }
                404 { return "Not Found - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
                405 { return "Method Not Allowed - –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω" }
                408 { return "Request Timeout - –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ" }
                429 { return "Too Many Requests - –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤" }
                500 { return "Internal Server Error - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }
                502 { return "Bad Gateway - –û—à–∏–±–∫–∞ —à–ª—é–∑–∞" }
                503 { return "Service Unavailable - –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" }
                504 { return "Gateway Timeout - –®–ª—é–∑ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" }
                default {
                    if ($Code -ge 200 -and $Code -lt 300) { return "–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å" }
                    elseif ($Code -ge 300 -and $Code -lt 400) { return "–†–µ–¥–∏—Ä–µ–∫—Ç" }
                    elseif ($Code -ge 400 -and $Code -lt 500) { return "–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞" }
                    elseif ($Code -ge 500 -and $Code -lt 600) { return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }
                    else { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥" }
                }
            }
        }
        function Get-CurlErrorDescription {
            param([int]$ExitCode)
            switch ($ExitCode) {
                1 { return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" }
                2 { return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" }
                3 { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª" }
                6 { return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞ –∏–ª–∏ DNS-–æ—à–∏–±–∫–∞" }
                7 { return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É" }
                28 { return "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ" }
                35 { return "–û—à–∏–±–∫–∞ SSL/TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" }
                52 { return "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö" }
                55 { return "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö" }
                56 { return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö" }
                60 { return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" }
                67 { return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" }
                77 { return "–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" }
                default { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ curl (–∫–æ–¥: $ExitCode)" }
            }
        }

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ URL
        function Test-Url {
            param(
                [string]$url,
                [int]$MaxRetries,
                [int]$RetryDelay,
                [int]$Timeout,
                [array]$DnsArgs # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            )
            $originalUrl = $url.Trim()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if ([string]::IsNullOrEmpty($originalUrl) -or $originalUrl.StartsWith("#")) {
                return $null
            }
            # –ï—Å–ª–∏ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º https://
            if (-not ($originalUrl -match "^[a-zA-Z]+://")) {
                $testUrl = "https://$originalUrl"
            } else {
                $testUrl = $originalUrl
            }

            $success = $false
            $retryCount = 0
            $attemptResults = @()
            $finalResult = $null

            # –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            for ($attempt = 1; $attempt -le $MaxRetries -and -not $success; $attempt++) {
                if ($attempt -gt 1) {
                    Start-Sleep -Seconds $RetryDelay
                }
                $startTime = Get-Date
                try {
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                     $curlArgs = @(
                        '-I',                    # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        '-L',                    # –°–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
                        '-s',                    # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
                        '--connect-timeout', $Timeout.ToString(),
                        '--max-time', '30'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã DNS/DoH, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                        if ($DnsArgs.Count -gt 0) { $DnsArgs }
                        '-w', "HTTP_CODE:%{http_code}|TOTAL_TIME:%{time_total}|SIZE_DOWNLOAD:%{size_download}|REDIRECT_URL:%{redirect_url}",
                        $testUrl
                    ) | Where-Object { $_ -ne $null } # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ $DnsArgs –ø—É—Å—Ç

                    $curlOutput = & curl.exe @curlArgs 2>$null
                    $endTime = Get-Date
                    $attemptTime = ($endTime - $startTime).TotalSeconds

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º exit code –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    $curlExitCode = $LASTEXITCODE

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ curl
                    $outputLines = $curlOutput | Where-Object { $_ -ne $null }
                    $outputString = $outputLines -join "`n"

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    $httpCode = ""
                    $totalTime = ""
                    $sizeDownload = ""
                    $redirectUrl = ""
                    $lastLine = $outputLines[-1]
                    if ($lastLine -match "HTTP_CODE:(\d+)\|TOTAL_TIME:([\d\.]+)\|SIZE_DOWNLOAD:(\d+)\|REDIRECT_URL:(.*)") {
                        $httpCode = $matches[1]
                        $totalTime = $matches[2]
                        $sizeDownload = $matches[3]
                        $redirectUrl = $matches[4].Trim()
                    }
                    elseif ($outputString -match "HTTP_CODE:(\d+)") {
                        $httpCode = $matches[1]
                    }

                    # –ü–æ–∏—Å–∫ HTTP –∫–æ–¥–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                    $headerLines = $outputLines | Where-Object { $_ -match "^HTTP/" }
                    $lastHeaderCode = ""
                    if ($headerLines) {
                        $lastHeader = $headerLines[-1]
                        if ($lastHeader -match "HTTP/\d+\.\d+\s+(\d+)") {
                            $lastHeaderCode = $matches[1]
                        }
                    }
                    if ([string]::IsNullOrEmpty($httpCode) -and $lastHeaderCode) {
                        $httpCode = $lastHeaderCode
                    }

                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º exit code
                    if ([string]::IsNullOrEmpty($httpCode)) {
                        if ($curlExitCode -ne 0) {
                            $httpCode = "000"
                        } else {
                            $httpCode = "0"
                        }
                    }

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
                    $isRedirect = $false
                    $redirectLocation = ""
                    if (-not [string]::IsNullOrWhiteSpace($redirectUrl)) {
                        $isRedirect = $true
                        $redirectLocation = $redirectUrl
                    } else {
                        $locationHeaders = $outputLines | Where-Object { $_ -match "^[Ll]ocation:" }
                        if ($locationHeaders) {
                            $isRedirect = $true
                            $redirectLocation = ($locationHeaders[-1] -replace "^[Ll]ocation:\s*", "").Trim()
                            if ($redirectLocation -and -not ($redirectLocation -match "^[a-zA-Z]+://")) {
                                try {
                                    $originalUri = [System.Uri]$testUrl
                                    if ($redirectLocation.StartsWith("/")) {
                                        $redirectLocation = "$($originalUri.Scheme)://$($originalUri.Host)$redirectLocation"
                                    } else {
                                        $basePath = $originalUri.AbsolutePath
                                        if (-not $basePath.EndsWith("/")) {
                                            $basePath = [System.IO.Path]::GetDirectoryName($basePath).Replace("\", "/")
                                            if (-not $basePath.EndsWith("/")) { $basePath += "/" }
                                        }
                                        $redirectLocation = "$($originalUri.Scheme)://$($originalUri.Host)$basePath$redirectLocation"
                                    }
                                } catch {
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π URL, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                }
                            }
                        }
                    }

                    [int]$code = if ([string]::IsNullOrEmpty($httpCode)) { 0 } else { [int]$httpCode }
                    $attemptResult = @{
                        attempt = $attempt
                        code = $code
                        isRedirect = $isRedirect
                        redirectLocation = $redirectLocation
                        totalTime = $totalTime
                        sizeDownload = $sizeDownload
                        executionTime = $attemptTime
                        curlExitCode = $curlExitCode
                    }
                    $attemptResults += $attemptResult

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                    if ($code -ge 200 -and $code -lt 400) {
                        $success = $true
                        $retryCount = $attempt - 1
                        $finalResult = $attemptResult
                    }
                    elseif ($attempt -eq $MaxRetries) {
                        $finalResult = $attemptResult
                    }
                }
                catch {
                    $attemptTime = (Get-Date - $startTime).TotalSeconds
                    $attemptResult = @{
                        attempt = $attempt
                        code = 0
                        error = $_.Exception.Message
                        executionTime = $attemptTime
                        curlExitCode = if (Get-Variable -Name LASTEXITCODE -ErrorAction SilentlyContinue) { $LASTEXITCODE } else { -1 }
                    }
                    $attemptResults += $attemptResult
                    if ($attempt -eq $MaxRetries) {
                        $finalResult = $attemptResult
                    }
                }
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            $category = if ($success) {
                if ($finalResult.isRedirect) {
                    if ($retryCount -gt 0) { "redirect_retry" } else { "redirect_first" }
                } else {
                    if ($retryCount -gt 0) { "available_retry" } else { "available_first" }
                }
            } else {
                if ($finalResult.code -eq 0 -or $finalResult.code -eq "000" -or $finalResult.curlExitCode -ne 0) { "error" } else { "unavailable" }
            }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
            $domain = try { ([System.Uri]$testUrl).Host } catch { $originalUrl }
            return [PSCustomObject]@{
                Url = $originalUrl
                TestUrl = $testUrl
                FinalResult = $finalResult
                AttemptResults = $attemptResults
                RetryCount = $retryCount
                Success = $success
                Category = $category
                Domain = $domain
                StatusCode = $finalResult.code
                ResponseTime = if ($finalResult.totalTime) { [double]$finalResult.totalTime } else { 0 }
            }
        }
        return Test-Url -url $url -MaxRetries $MaxRetries -RetryDelay $RetryDelay -Timeout $Timeout -DnsArgs $DnsArgs
    }
    $powershell = [powershell]::Create()
    $powershell.RunspacePool = $runspacePool
    [void]$powershell.AddScript($scriptBlock).AddArgument($_).AddArgument($MaxRetries).AddArgument($RetryDelay).AddArgument($Timeout).AddArgument($dnsArgs)
    $jobs += [PSCustomObject]@{
        PowerShell = $powershell
        Handle = $powershell.BeginInvoke()
    }
}

# –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫..." -ForegroundColor Cyan
$completedJobs = 0
$totalJobs = $jobs.Count
foreach ($job in $jobs) {
    $result = $job.PowerShell.EndInvoke($job.Handle)
    if ($result -ne $null) {
        [void]$results.Add($result)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ
        [System.Threading.Monitor]::Enter($lock)
        try {
            switch ($result.Category) {
                "available_first" { $summary.available++ }
                "available_retry" {
                    $summary.available++
                    $summary.retries++
                }
                "redirect_first" { $summary.redirect++ }
                "redirect_retry" {
                    $summary.redirect++
                    $summary.retries++
                }
                "unavailable" { $summary.unavailable++ }
                "error" { $summary.errors++ }
            }
            if ($result.ResponseTime -gt 0) {
                $summary.totalTime += $result.ResponseTime
            }
        }
        finally {
            [System.Threading.Monitor]::Exit($lock)
        }
    }
    $completedJobs++
    Write-Progress -Activity "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤" -Status "–ó–∞–≤–µ—Ä—à–µ–Ω–æ: $completedJobs –∏–∑ $totalJobs" -PercentComplete (($completedJobs / $totalJobs) * 100)
    $job.PowerShell.Dispose()
}
$runspacePool.Close()
$runspacePool.Dispose()
Write-Progress -Activity "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤" -Completed

# –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
Write-Host "=" * 100 -ForegroundColor Cyan
Write-Host "üìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò:" -ForegroundColor Cyan
Write-Host "   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: $($summary.total)" -ForegroundColor Cyan
Write-Host "   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: $($summary.available)" -ForegroundColor Green
Write-Host "   ‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç—ã: $($summary.redirect)" -ForegroundColor Yellow
Write-Host "   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: $($summary.unavailable)" -ForegroundColor Red
Write-Host "   ‚ö†Ô∏è  –û—à–∏–±–∫–∏: $($summary.errors)" -ForegroundColor Magenta
Write-Host "   üîÑ –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏: $($summary.retries)" -ForegroundColor Blue
# –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
if (($summary.available + $summary.redirect) -gt 0 -and $summary.totalTime -gt 0) {
    $avgTime = $summary.totalTime / ($summary.available + $summary.redirect)
    Write-Host "   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: $(('{0:F3}' -f $avgTime))s" -ForegroundColor Cyan
}
Write-Host "=" * 100 -ForegroundColor Cyan

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
Write-Host "üìã –°–û–†–¢–ò–†–û–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:" -ForegroundColor Cyan
Write-Host ""

# 1. –°–∞–π—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
$firstTryAvailable = $results | Where-Object { $_.Category -eq "available_first" } | Sort-Object { $_.Domain }
if ($firstTryAvailable.Count -gt 0) {
    Write-Host "‚úÖ –î–û–°–¢–£–ü–ù–´ –° –ü–ï–†–í–û–ô –ü–û–ü–´–¢–ö–ò ($($firstTryAvailable.Count)):" -ForegroundColor Green
    foreach ($result in $firstTryAvailable) {
        Write-Host "   " -NoNewline
        Write-Host $result.TestUrl -ForegroundColor Blue
        Write-Host "     –ö–æ–¥: $($result.StatusCode) - $(Get-HttpCodeDescription -Code $result.StatusCode)" -ForegroundColor Gray
        if ($result.ResponseTime -gt 0) {
            Write-Host "     –í—Ä–µ–º—è: $(('{0:F3}' -f $result.ResponseTime))s" -ForegroundColor Gray
        }
    }
    Write-Host ""
}

# 2. –°–∞–π—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
$retryAvailable = $results | Where-Object { $_.Category -eq "available_retry" } | Sort-Object { $_.Domain }
if ($retryAvailable.Count -gt 0) {
    Write-Host "üîÑ –î–û–°–¢–£–ü–ù–´ –ü–û–°–õ–ï –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö ($($retryAvailable.Count)):" -ForegroundColor Blue
    foreach ($result in $retryAvailable) {
        Write-Host "   " -NoNewline
        Write-Host $result.TestUrl -ForegroundColor Blue
        Write-Host "     –ö–æ–¥: $($result.StatusCode) - $(Get-HttpCodeDescription -Code $result.StatusCode)" -ForegroundColor Gray
        Write-Host "     –ü–æ–ø—ã—Ç–æ–∫: $($result.RetryCount + 1)" -ForegroundColor Gray
        if ($result.ResponseTime -gt 0) {
            Write-Host "     –í—Ä–µ–º—è: $(('{0:F3}' -f $result.ResponseTime))s" -ForegroundColor Gray
        }
    }
    Write-Host ""
}

# 3. –†–µ–¥–∏—Ä–µ–∫—Ç—ã —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
$firstTryRedirect = $results | Where-Object { $_.Category -eq "redirect_first" } | Sort-Object { $_.Domain }
if ($firstTryRedirect.Count -gt 0) {
    Write-Host "‚ö†Ô∏è  –†–ï–î–ò–†–ï–ö–¢–´ –° –ü–ï–†–í–û–ô –ü–û–ü–´–¢–ö–ò ($($firstTryRedirect.Count)):" -ForegroundColor Yellow
    foreach ($result in $firstTryRedirect) {
        Write-Host "   " -NoNewline
        Write-Host $result.TestUrl -ForegroundColor Blue
        Write-Host "     –ö–æ–¥: $($result.StatusCode) - $(Get-HttpCodeDescription -Code $result.StatusCode)" -ForegroundColor Yellow
        if ($result.FinalResult.redirectLocation) {
            Write-Host "     –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: " -NoNewline -ForegroundColor Yellow
            Write-Host $result.FinalResult.redirectLocation -ForegroundColor Blue
        }
    }
    Write-Host ""
}

# 4. –†–µ–¥–∏—Ä–µ–∫—Ç—ã –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
$retryRedirect = $results | Where-Object { $_.Category -eq "redirect_retry" } | Sort-Object { $_.Domain }
if ($retryRedirect.Count -gt 0) {
    Write-Host "üîÑ‚ö†Ô∏è  –†–ï–î–ò–†–ï–ö–¢–´ –ü–û–°–õ–ï –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö ($($retryRedirect.Count)):" -ForegroundColor DarkYellow
    foreach ($result in $retryRedirect) {
        Write-Host "   " -NoNewline
        Write-Host $result.TestUrl -ForegroundColor Blue
        Write-Host "     –ö–æ–¥: $($result.StatusCode) - $(Get-HttpCodeDescription -Code $result.StatusCode)" -ForegroundColor Yellow
        if ($result.FinalResult.redirectLocation) {
            Write-Host "     –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: " -NoNewline -ForegroundColor Yellow
            Write-Host $result.FinalResult.redirectLocation -ForegroundColor Blue
        }
        Write-Host "     –ü–æ–ø—ã—Ç–æ–∫: $($result.RetryCount + 1)" -ForegroundColor Yellow
    }
    Write-Host ""
}

# 5. –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã
$unavailableSites = $results | Where-Object { $_.Category -eq "unavailable" } | Sort-Object { $_.Domain }
if ($unavailableSites.Count -gt 0) {
    Write-Host "‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´ ($($unavailableSites.Count)):" -ForegroundColor Red
    foreach ($result in $unavailableSites) {
        Write-Host "   " -NoNewline
        Write-Host $result.TestUrl -ForegroundColor Blue
        Write-Host "     –ö–æ–¥ –æ—à–∏–±–∫–∏: $($result.StatusCode) - $(Get-HttpCodeDescription -Code $result.StatusCode)" -ForegroundColor Red
    }
    Write-Host ""
}

# 6. –°–∞–π—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
$errorSites = $results | Where-Object { $_.Category -eq "error" } | Sort-Object { $_.Domain }
if ($errorSites.Count -gt 0) {
    Write-Host "‚ö†Ô∏è  –û–®–ò–ë–ö–ò ($($errorSites.Count)):" -ForegroundColor Magenta
    foreach ($result in $errorSites) {
        Write-Host "   " -NoNewline
        Write-Host $result.TestUrl -ForegroundColor Blue
        if ($result.FinalResult.curlExitCode -ne 0 -and $result.FinalResult.curlExitCode -ne $null) {
            Write-Host "     –û—à–∏–±–∫–∞ curl: $($result.FinalResult.curlExitCode) - $(Get-CurlErrorDescription -ExitCode $result.FinalResult.curlExitCode)" -ForegroundColor Magenta
        } elseif ($result.FinalResult.error) {
            Write-Host "     $($result.FinalResult.error)" -ForegroundColor Magenta
        } else {
            Write-Host "     –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞" -ForegroundColor Magenta
        }
    }
    Write-Host ""
}

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª TXT
"" | Out-File $outputFile -Append
"–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:" | Out-File $outputFile -Append
"=" * 100 | Out-File $outputFile -Append
foreach ($result in $results) {
    $status = switch ($result.Category) {
        "available_first" { "‚úÖ –î–û–°–¢–£–ü–ï–ù (—Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏)" }
        "available_retry" { "üîÑ –î–û–°–¢–£–ü–ï–ù (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)" }
        "redirect_first" { "‚ö†Ô∏è  –†–ï–î–ò–†–ï–ö–¢ (—Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏)" }
        "redirect_retry" { "üîÑ‚ö†Ô∏è  –†–ï–î–ò–†–ï–ö–¢ (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)" }
        "unavailable" { "‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù" }
        "error" { "‚ö†Ô∏è  –û–®–ò–ë–ö–ê" }
        default { "‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–û" }
    }
    $resultLine = "[$($result.Url)] - $status"
    if ($result.StatusCode -ne 0 -and $result.StatusCode -ne "000") {
        $resultLine += " (–ö–æ–¥: $($result.StatusCode) - $(Get-HttpCodeDescription -Code $result.StatusCode))"
    } elseif ($result.StatusCode -eq 0 -or $result.StatusCode -eq "000") {
        if ($result.FinalResult.curlExitCode -ne 0 -and $result.FinalResult.curlExitCode -ne $null) {
            $resultLine += " (–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ - –æ—à–∏–±–∫–∞ curl: $($result.FinalResult.curlExitCode))"
        } else {
            $resultLine += " (–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)"
        }
    }
    if ($result.FinalResult.redirectLocation) {
        $resultLine += " -> $($result.FinalResult.redirectLocation)"
    }
    if ($result.RetryCount -gt 0) {
        $resultLine += " (–ø–æ–ø—ã—Ç–æ–∫: $($result.RetryCount + 1))"
    }
    if ($result.ResponseTime -gt 0) {
        $resultLine += " (–≤—Ä–µ–º—è: $(('{0:F3}' -f $result.ResponseTime))s)"
    }
    $resultLine | Out-File $outputFile -Append
    # –î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º
    if ($result.AttemptResults.Count -gt 1) {
        "    –ü–æ–ø—ã—Ç–∫–∏: " + ($result.AttemptResults | ForEach-Object {
            if ($_.code -ne 0 -and $_.code -ne "000") { "–ü–æ–ø—ã—Ç–∫–∞ $($_.attempt): –ö–æ–¥ $($_.code)" }
            else { "–ü–æ–ø—ã—Ç–∫–∞ $($_.attempt): –û—à–∏–±–∫–∞" }
        }) -join ", " | Out-File $outputFile -Append
    }
}

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª TXT
"" | Out-File $outputFile -Append
"=" * 100 | Out-File $outputFile -Append
"–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:" | Out-File $outputFile -Append
"=" * 100 | Out-File $outputFile -Append

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª TXT
function Write-CategoryToFile {
    param($Results, $Title, $OutputFile)
    if ($Results.Count -gt 0) {
        "" | Out-File $outputFile -Append
        "$Title ($($Results.Count)):" | Out-File $outputFile -Append
        "=" * 50 | Out-File $outputFile -Append
        foreach ($result in $Results) {
            $line = $result.TestUrl
            if ($result.StatusCode -ne 0 -and $result.StatusCode -ne "000") {
                $line += " (–ö–æ–¥: $($result.StatusCode) - $(Get-HttpCodeDescription -Code $result.StatusCode))"
            } elseif ($result.StatusCode -eq 0 -or $result.StatusCode -eq "000") {
                if ($result.FinalResult.curlExitCode -ne 0 -and $result.FinalResult.curlExitCode -ne $null) {
                    $line += " (–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ - –æ—à–∏–±–∫–∞ curl: $($result.FinalResult.curlExitCode))"
                } else {
                    $line += " (–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)"
                }
            }
            if ($result.FinalResult.redirectLocation) {
                $line += " -> $($result.FinalResult.redirectLocation)"
            }
            if ($result.RetryCount -gt 0) {
                $line += " (–ø–æ–ø—ã—Ç–æ–∫: $($result.RetryCount + 1))"
            }
            if ($result.ResponseTime -gt 0) {
                $line += " (–≤—Ä–µ–º—è: $(('{0:F3}' -f $result.ResponseTime))s)"
            }
            $line | Out-File $outputFile -Append
        }
    }
}

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ TXT
Write-CategoryToFile -Results ($results | Where-Object { $_.Category -eq "available_first" } | Sort-Object { $_.Domain }) -Title "‚úÖ –î–û–°–¢–£–ü–ù–´ –° –ü–ï–†–í–û–ô –ü–û–ü–´–¢–ö–ò" -OutputFile $outputFile
Write-CategoryToFile -Results ($results | Where-Object { $_.Category -eq "available_retry" } | Sort-Object { $_.Domain }) -Title "üîÑ –î–û–°–¢–£–ü–ù–´ –ü–û–°–õ–ï –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö" -OutputFile $outputFile
Write-CategoryToFile -Results ($results | Where-Object { $_.Category -eq "redirect_first" } | Sort-Object { $_.Domain }) -Title "‚ö†Ô∏è  –†–ï–î–ò–†–ï–ö–¢–´ –° –ü–ï–†–í–û–ô –ü–û–ü–´–¢–ö–ò" -OutputFile $outputFile
Write-CategoryToFile -Results ($results | Where-Object { $_.Category -eq "redirect_retry" } | Sort-Object { $_.Domain }) -Title "üîÑ‚ö†Ô∏è  –†–ï–î–ò–†–ï–ö–¢–´ –ü–û–°–õ–ï –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö" -OutputFile $outputFile
Write-CategoryToFile -Results ($results | Where-Object { $_.Category -eq "unavailable" } | Sort-Object { $_.Domain }) -Title "‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´" -OutputFile $outputFile
Write-CategoryToFile -Results ($results | Where-Object { $_.Category -eq "error" } | Sort-Object { $_.Domain }) -Title "‚ö†Ô∏è  –û–®–ò–ë–ö–ò" -OutputFile $outputFile

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –≤ —Ñ–∞–π–ª TXT
"" | Out-File $outputFile -Append
"=" * 100 | Out-File $outputFile -Append
"–°–í–û–î–ö–ê:" | Out-File $outputFile -Append
"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: $($summary.total)" | Out-File $outputFile -Append
"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: $($summary.available)" | Out-File $outputFile -Append
"‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç—ã: $($summary.redirect)" | Out-File $outputFile -Append
"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: $($summary.unavailable)" | Out-File $outputFile -Append
"‚ö†Ô∏è  –û—à–∏–±–∫–∏: $($summary.errors)" | Out-File $outputFile -Append
"üîÑ –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏: $($summary.retries)" | Out-File $outputFile -Append
if (($summary.available + $summary.redirect) -gt 0 -and $summary.totalTime -gt 0) {
    $avgTime = $summary.totalTime / ($summary.available + $summary.redirect)
    "‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: $(('{0:F3}' -f $avgTime))s" | Out-File $outputFile -Append
}
Write-Host "–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $OutputFile" -ForegroundColor Blue

# –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
$csvFile = [System.IO.Path]::ChangeExtension($OutputFile, ".csv")
$results | ForEach-Object {
    [PSCustomObject]@{
        URL = $_.Url
        TestURL = $_.TestUrl
        Status = switch ($_.Category) {
            "available_first" { "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (1 –ø–æ–ø—ã—Ç–∫–∞)" }
            "available_retry" { "üîÑ –î–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)" }
            "redirect_first" { "‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç (1 –ø–æ–ø—ã—Ç–∫–∞)" }
            "redirect_retry" { "üîÑ‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)" }
            "unavailable" { "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" }
            "error" { "‚ö†Ô∏è  –û—à–∏–±–∫–∞" }
            default { "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" }
        }
        FinalCode = $_.StatusCode
        CodeDescription = if ($_.StatusCode -ne 0) { Get-HttpCodeDescription -Code $_.StatusCode } else { "" }
        RedirectLocation = $_.FinalResult.redirectLocation
        RetryCount = $_.RetryCount
        TotalTime = $_.ResponseTime
        Domain = $_.Domain
        CurlExitCode = $_.FinalResult.curlExitCode
    }
} | Export-Csv -Path $csvFile -Encoding UTF8 -NoTypeInformation
Write-Host "CSV-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: $csvFile" -ForegroundColor Blue

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
$mdFile = [System.IO.Path]::ChangeExtension($OutputFile, ".md")
"# –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–æ–≤" | Out-File $mdFile -Encoding UTF8
"" | Out-File $mdFile -Append
"**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** $timestamp  " | Out-File $mdFile -Append
"**$dnsInfoLine**  " | Out-File $mdFile -Append
"" | Out-File $mdFile -Append
"## üìä –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏" | Out-File $mdFile -Append
"" | Out-File $mdFile -Append
"| –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å | –ó–Ω–∞—á–µ–Ω–∏–µ |" | Out-File $mdFile -Append
"| :--- | :--- |" | Out-File $mdFile -Append
"| –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ | $($summary.total) |" | Out-File $mdFile -Append
"| ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ | $($summary.available) |" | Out-File $mdFile -Append
"| ‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç—ã | $($summary.redirect) |" | Out-File $mdFile -Append
"| ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ | $($summary.unavailable) |" | Out-File $mdFile -Append
"| ‚ö†Ô∏è  –û—à–∏–±–∫–∏ | $($summary.errors) |" | Out-File $mdFile -Append
"| üîÑ –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ | $($summary.retries) |" | Out-File $mdFile -Append
if (($summary.available + $summary.redirect) -gt 0 -and $summary.totalTime -gt 0) {
    $avgTime = $summary.totalTime / ($summary.available + $summary.redirect)
    "| ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ | $(('{0:F3}' -f $avgTime))s |" | Out-File $mdFile -Append
}
"" | Out-File $mdFile -Append

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª Markdown
function Write-MdCategory {
    param($Results, $Title, $MdFile)
    if ($Results.Count -gt 0) {
        "## $Title ($($Results.Count))" | Out-File $mdFile -Append
        "" | Out-File $mdFile -Append
        "| URL | –°—Ç–∞—Ç—É—Å | –ö–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ | –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ |" | Out-File $mdFile -Append
        "| :--- | :--- | :--- | :--- | :--- |" | Out-File $mdFile -Append
        foreach ($result in $Results) {
            $url = "[$($result.TestUrl)]($($result.TestUrl))"
            $status = switch ($result.Category) {
                "available_first" { "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (1 –ø–æ–ø—ã—Ç–∫–∞)" }
                "available_retry" { "üîÑ –î–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)" }
                "redirect_first" { "‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç (1 –ø–æ–ø—ã—Ç–∫–∞)" }
                "redirect_retry" { "üîÑ‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)" }
                "unavailable" { "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" }
                "error" { "‚ö†Ô∏è  –û—à–∏–±–∫–∞" }
                default { "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" }
            }
            $code = if ($result.StatusCode -ne 0 -and $result.StatusCode -ne "000") { $result.StatusCode } else { "N/A" }
            $description = if ($result.StatusCode -ne 0 -and $result.StatusCode -ne "000") { Get-HttpCodeDescription -Code $result.StatusCode } else { "" }
            if ($result.StatusCode -eq 0 -or $result.StatusCode -eq "000") {
                if ($result.FinalResult.curlExitCode -ne 0 -and $result.FinalResult.curlExitCode -ne $null) {
                    $description = "–û—à–∏–±–∫–∞ curl: $($result.FinalResult.curlExitCode) - $(Get-CurlErrorDescription -ExitCode $result.FinalResult.curlExitCode)"
                } elseif ($result.FinalResult.error) {
                    $description = $result.FinalResult.error
                } else {
                    $description = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                }
            }
            
            $additional = @()
            if ($result.FinalResult.redirectLocation) {
                $additional += "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: [$($result.FinalResult.redirectLocation)]($($result.FinalResult.redirectLocation))"
            }
            if ($result.RetryCount -gt 0) {
                $additional += "–ü–æ–ø—ã—Ç–æ–∫: $($result.RetryCount + 1)"
            }
            if ($result.ResponseTime -gt 0) {
                $additional += "–í—Ä–µ–º—è: $(('{0:F3}' -f $result.ResponseTime))s"
            }
            $additionalStr = $additional -join "; "
            
            "| $url | $status | $code | $description | $additionalStr |" | Out-File $mdFile -Append
        }
        "" | Out-File $mdFile -Append
    }
}

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ Markdown
Write-MdCategory -Results ($results | Where-Object { $_.Category -eq "available_first" } | Sort-Object { $_.Domain }) -Title "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏" -MdFile $mdFile
Write-MdCategory -Results ($results | Where-Object { $_.Category -eq "available_retry" } | Sort-Object { $_.Domain }) -Title "üîÑ –î–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫" -MdFile $mdFile
Write-MdCategory -Results ($results | Where-Object { $_.Category -eq "redirect_first" } | Sort-Object { $_.Domain }) -Title "‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç—ã —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏" -MdFile $mdFile
Write-MdCategory -Results ($results | Where-Object { $_.Category -eq "redirect_retry" } | Sort-Object { $_.Domain }) -Title "üîÑ‚ö†Ô∏è  –†–µ–¥–∏—Ä–µ–∫—Ç—ã –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫" -MdFile $mdFile
Write-MdCategory -Results ($results | Where-Object { $_.Category -eq "unavailable" } | Sort-Object { $_.Domain }) -Title "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã" -MdFile $mdFile
Write-MdCategory -Results ($results | Where-Object { $_.Category -eq "error" } | Sort-Object { $_.Domain }) -Title "‚ö†Ô∏è  –û—à–∏–±–∫–∏" -MdFile $mdFile

Write-Host "Markdown-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: $mdFile" -ForegroundColor Blue
